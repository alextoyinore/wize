import { NextResponse } from 'next/server'
import clientPromise from '@/lib/mongodb'
import { logEvent } from '@/services/logger'

export async function middleware(request) {
  const path = request.nextUrl.pathname
  const isApiRoute = path.startsWith('/api')
  const isAdminRoute = path.startsWith('/admin')
  const isAdminLogin = path === '/admin/login'
  const isAuthRoute = path.startsWith('/api/admin/auth')

  // Log access attempt
  await logEvent({
    type: 'ACCESS_ATTEMPT',
    severity: 'info',
    ip: request.ip,
    userAgent: request.headers.get('user-agent'),
    userId: request.cookies.get('admin_token')?.value ? 'UNKNOWN' : null,
    message: `Access attempt to ${path}`
  })

  // Allow public routes and auth endpoints
  if (!isAdminRoute || isAdminLogin || isAuthRoute) {
    return NextResponse.next()
  }

  try {
    // Get token from cookies
    const token = request.cookies.get('admin_token')?.value
    if (!token) {
      await logEvent({
        type: 'ACCESS_DENIED',
        severity: 'warning',
        ip: request.ip,
        userAgent: request.headers.get('user-agent'),
        message: 'No token provided'
      })
      return NextResponse.redirect(new URL('/admin/login', request.url))
    }

    // Verify MongoDB session
    const db = await clientPromise.db('wize')
    const sessionsCollection = db.collection('admin_sessions')
    const session = await sessionsCollection.findOne({ token })

    if (!session || !session.active) {
      await logEvent({
        type: 'ACCESS_DENIED',
        severity: 'warning',
        ip: request.ip,
        userAgent: request.headers.get('user-agent'),
        message: 'Invalid or inactive session'
      })
      return NextResponse.redirect(new URL('/admin/login', request.url))
    }

    // Get user from session
    const usersCollection = db.collection('users')
    const user = await usersCollection.findOne({ email: session.email })

    // Check if user has admin role
    if (!user?.role?.includes('super_admin')) {
      await logEvent({
        type: 'ACCESS_DENIED',
        severity: 'warning',
        ip: request.ip,
        userAgent: request.headers.get('user-agent'),
        userId: decodedToken.uid,
        message: 'User does not have admin role'
      })
      return NextResponse.redirect(new URL('/admin/login', request.url))
    }

    // Log successful access
    await logEvent({
      type: 'ACCESS_GRANTED',
      severity: 'info',
      ip: request.ip,
      userAgent: request.headers.get('user-agent'),
      userId: decodedToken.uid,
      message: 'Admin access granted'
    })

    return NextResponse.next()
  } catch (error) {
    await logEvent({
      type: 'ACCESS_ERROR',
      severity: 'error',
      ip: request.ip,
      userAgent: request.headers.get('user-agent'),
      message: error.message,
      metadata: { error: error.stack }
    })
    return NextResponse.redirect(new URL('/admin/login', request.url))
  }
}

export const config = {
  matcher: [
    '/admin/:path*',
    '/api/admin/:path*',
  ],
}
